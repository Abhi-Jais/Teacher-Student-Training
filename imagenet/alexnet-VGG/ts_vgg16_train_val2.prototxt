name: "VGG_ILSVRC_16_layers"
layers {
  name: "data"
  type: DATA
  include {
    phase: TRAIN
  }
 transform_param {
    crop_size: 224
    mean_value: 104
    mean_value: 117
    mean_value: 123
    mirror: true
 }
 data_param {
    source: "/home/ubuntu/caffe/examples/imagenet/ilsvrc12_train_lmdb"
    batch_size: 20
    backend: LMDB
  }
  top: "data"
  top: "label"
}
layers {
  name: "data"
  type: DATA
  include {
    phase: TEST
  }
 transform_param {
    crop_size: 224
    mean_value: 104
    mean_value: 117
    mean_value: 123
    mirror: false
 }
 data_param {
    source: "/home/ubuntu/caffe/examples/imagenet/ilsvrc12_val_lmdb"
    batch_size: 50
    backend: LMDB
  }
  top: "data"
  top: "label"
}
layers {
  bottom: "data"
  top: "conv_st_1_1"
  name: "conv_st_1_1"
  type: CONVOLUTION
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_1_1"
  top: "conv_st_1_1"
  name: "relu_st_1_1"
  type: RELU
}
layers {
  bottom: "conv_st_1_1"
  top: "conv_st_1_2"
  name: "conv_st_1_2"
  type: CONVOLUTION
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_1_2"
  top: "conv_st_1_2"
  name: "relu_st_1_2"
  type: RELU
}
layers {
  bottom: "conv_st_1_2"
  top: "pool_st_1"
  name: "pool_st_1"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  bottom: "pool_st_1"
  top: "conv_st_2_1"
  name: "conv_st_2_1"
  type: CONVOLUTION
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_2_1"
  top: "conv_st_2_1"
  name: "relu_st_2_1"
  type: RELU
}
layers {
  bottom: "conv_st_2_1"
  top: "conv_st_2_2"
  name: "conv_st_2_2"
  type: CONVOLUTION
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_2_2"
  top: "conv_st_2_2"
  name: "relu_st_2_2"
  type: RELU
}
layers {
  bottom: "conv_st_2_2"
  top: "pool_st_2"
  name: "pool_st_2"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  bottom: "pool_st_2"
  top: "conv_st_3_1"
  name: "conv_st_3_1"
  type: CONVOLUTION
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_3_1"
  top: "conv_st_3_1"
  name: "relu_st_3_1"
  type: RELU
}
layers {
  bottom: "conv_st_3_1"
  top: "conv_st_3_2"
  name: "conv_st_3_2"
  type: CONVOLUTION
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_3_2"
  top: "conv_st_3_2"
  name: "relu_st_3_2"
  type: RELU
}
layers {
  bottom: "conv_st_3_2"
  top: "conv_st_3_3"
  name: "conv_st_3_3"
  type: CONVOLUTION
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_3_3"
  top: "conv_st_3_3"
  name: "relu_st_3_3"
  type: RELU
}
layers {
  bottom: "conv_st_3_3"
  top: "pool_st_3"
  name: "pool_st_3"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  bottom: "pool_st_3"
  top: "conv_st_4_1"
  name: "conv_st_4_1"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_4_1"
  top: "conv_st_4_1"
  name: "relu_st_4_1"
  type: RELU
}
layers {
  bottom: "conv_st_4_1"
  top: "conv_st_4_2"
  name: "conv_st_4_2"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_4_2"
  top: "conv_st_4_2"
  name: "relu_st_4_2"
  type: RELU
}
layers {
  bottom: "conv_st_4_2"
  top: "conv_st_4_3"
  name: "conv_st_4_3"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_4_3"
  top: "conv_st_4_3"
  name: "relu_st_4_3"
  type: RELU
}
layers {
  bottom: "conv_st_4_3"
  top: "pool_st_4"
  name: "pool_st_4"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  bottom: "pool_st_4"
  top: "conv_st_5_1"
  name: "conv_st_5_1"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_5_1"
  top: "conv_st_5_1"
  name: "relu_st_5_1"
  type: RELU
}
layers {
  bottom: "conv_st_5_1"
  top: "conv_st_5_2"
  name: "conv_st_5_2"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_5_2"
  top: "conv_st_5_2"
  name: "relu_st_5_2"
  type: RELU
}
layers {
  bottom: "conv_st_5_2"
  top: "conv_st_5_3"
  name: "conv_st_5_3"
  type: CONVOLUTION
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "conv_st_5_3"
  top: "conv_st_5_3"
  name: "relu_st_5_3"
  type: RELU
}
layers {
  bottom: "conv_st_5_3"
  top: "pool_st_5"
  name: "pool_st_5"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  bottom: "pool_st_5"
  top: "fc_st_6"
  name: "fc_st_6"
  type: INNER_PRODUCT
  inner_product_param {
    num_output: 4096
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "fc_st_6"
  top: "fc_st_6"
  name: "relu_st_6"
  type: RELU
}
layers {
  bottom: "fc_st_6"
  top: "fc_st_6"
  name: "drop_st_6"
  type: DROPOUT
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  bottom: "fc_st_6"
  top: "fc_st_7"
  name: "fc_st_7"
  type: INNER_PRODUCT
  inner_product_param {
    num_output: 4096
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  bottom: "fc_st_7"
  top: "fc_st_7"
  name: "relu_st_7"
  type: RELU
}
layers {
  bottom: "fc_st_7"
  top: "fc_st_7"
  name: "drop_st_7"
  type: DROPOUT
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "fc_st_8"
  bottom: "fc_st_7"
  top: "fc_st_8"
  type: INNER_PRODUCT
  inner_product_param {
    num_output: 1000
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  name: "loss"
  type: SOFTMAX_LOSS
  bottom: "fc_st_8"
  bottom: "label"
  top: "loss/loss"
}
layers {
  name: "accuracy/top1"
  type: ACCURACY
  bottom: "fc_st_8"
  bottom: "label"
  top: "accuracy@1"
  include: { phase: TEST }
  accuracy_param {
    top_k: 1
  }
}
layers {
  name: "accuracy/top5"
  type: ACCURACY
  bottom: "fc_st_8"
  bottom: "label"
  top: "accuracy@5"
  include: { phase: TEST }
  accuracy_param {
    top_k: 5
  }
}
