layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00392156885937
  }
  data_param {
    source: "/opt/caffe/examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "test_data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00392156885937
  }
  data_param {
    source: "/opt/caffe/examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv_s1"
  type: "Convolution"
  bottom: "data"
  top: "conv_s1"
  param {
    lr_mult: 1.0
  }
  param {
    lr_mult: 2.0
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    stride_h: 1
    stride_w: 1
  }
}
layer {
  name: "pool_s1"
  type: "Pooling"
  bottom: "conv_s1"
  top: "pool_s1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv_s2"
  type: "Convolution"
  bottom: "pool_s1"
  top: "conv_s2"
  param {
    lr_mult: 1.0
  }
  param {
    lr_mult: 2.0
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool_s2"
  type: "Pooling"
  bottom: "conv_s2"
  top: "pool_s2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip_s1"
  type: "InnerProduct"
  bottom: "pool_s2"
  top: "ip_s1"
  param {
    lr_mult: 1.0
  }
  param {
    lr_mult: 2.0
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu_s1"
  type: "ReLU"
  bottom: "ip_s1"
  top: "ip_s1"
}
layer {
  name: "ip_s2"
  type: "InnerProduct"
  bottom: "ip_s1"
  top: "ip_s2"
  param {
    lr_mult: 1.0
  }
  param {
    lr_mult: 2.0
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_t1"
  type: "Convolution"
  bottom: "data"
  top: "conv_t1"
  param {
    lr_mult: 0.0
  }
  param {
    lr_mult: 0.0
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool_t1"
  type: "Pooling"
  bottom: "conv_t1"
  top: "pool_t1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv_t2"
  type: "Convolution"
  bottom: "pool_t1"
  top: "conv_t2"
  param {
    lr_mult: 0.0
  }
  param {
    lr_mult: 0.0
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool_t2"
  type: "Pooling"
  bottom: "conv_t2"
  top: "pool_t2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip_t1"
  type: "InnerProduct"
  bottom: "pool_t2"
  top: "ip_t1"
  param {
    lr_mult: 0.0
  }
  param {
    lr_mult: 0.0
  }
  inner_product_param {
    num_output: 500
  }
}
layer {
  name: "relu_t1"
  type: "ReLU"
  bottom: "ip_t1"
  top: "ip_t1"
}
layer {
  name: "ip_t2"
  type: "InnerProduct"
  bottom: "ip_t1"
  top: "ip_t2"
  param {
    lr_mult: 0.0
  }
  param {
    lr_mult: 0.0
  }
  inner_product_param {
    num_output: 100
  }
}
layer {
  name: "sf_s1"
  type: "Softmax"
  bottom: "ip_s2"
  top: "sf_s1"
}
layer {
  name: "sf_t1"
  type: "Softmax"
  bottom: "ip_t2"
  top: "sf_t1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip_s2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "ts_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "sf_s1"
  bottom: "sf_t1"
  top: "ts_loss"
  loss_weight: 1
}
